
#include <cuda.h>
#include <cuda_runtime_api.h>
#include <device_launch_parameters.h>

# include <stdlib.h>
# include <stdio.h>
# include <math.h>
# include <time.h>
# include <omp.h>
#include <cstring>
#include <bitset>

#define NUM_OF_GPU_THREADS 1024

#define FUNCTION_DIM_TYPE_NORMAL 0
#define FUNCTION_DIM_TYPE_MATRIX 1
#define FUNCTION_DIM_TYPE_DISP   2

#define RULE_TYPE_QUADRATIC 0
#define RULE_TYPE_TRAPHEZOID 1
#define RULE_TYPE_SIMPSON 2

const double ACCURACY = 0.01;

__device__ __constant__ double aGpu;
__device__ __constant__ double bGpu;
__device__ __constant__ int nGpu;
__device__ __constant__ int functionDimTypeGpu;
__device__ __constant__ int functionRuleTypeGpu;
__device__ __constant__ double hGpu;

double a;
double b;
int n;
int functionDimTypeCPU;
const int MAX_BLOCKS = 65536;

__device__ double gpuF(double x) {
    //return 1;
    double pi = 3.141592653589793;
    double value;

    value = 50.0 / (pi * (2500.0 * x * x + 1.0));

    return value;
}



double f(double x) {
    double pi = 3.141592653589793;
    double value;

    value = 50.0 / (pi * (2500.0 * x * x + 1.0));

    return value;
}

__global__ void addKernel(double *sum)
{
    __shared__ double sharedData[NUM_OF_GPU_THREADS];

    unsigned int threadId;;
    unsigned int retIdx;
    unsigned int i;
    double x;

    threadId = threadIdx.x;
    switch (functionDimTypeGpu)
    {
    case FUNCTION_DIM_TYPE_NORMAL:
        retIdx = blockIdx.x;
        break;
    case FUNCTION_DIM_TYPE_MATRIX:
        retIdx = blockIdx.x * NUM_OF_GPU_THREADS + blockIdx.y;
        break;
    case FUNCTION_DIM_TYPE_DISP:
        retIdx = (nGpu / NUM_OF_GPU_THREADS / NUM_OF_GPU_THREADS) *
            NUM_OF_GPU_THREADS + blockIdx.x;
        break;
    default: return;
    }

    if (threadId == 0)
    {
        printf("Uslo\n");
    }


    i = retIdx * blockDim.x + threadId;

    switch (functionRuleTypeGpu)
    {
    case RULE_TYPE_QUADRATIC:
        x = ((double)(nGpu - i - 1) * aGpu + (double)(i)* bGpu) /
            (double)(nGpu - 1);
        sharedData[threadId] = gpuF(x);
        break;
    case RULE_TYPE_TRAPHEZOID:
        x = aGpu + i * hGpu;
        if (i > 0 && i < nGpu)
        {
            sharedData[threadId] = gpuF(x);
        }
        else
        {
            sharedData[threadId] = 0.5 * gpuF(x);
        }
        break;
    case RULE_TYPE_SIMPSON:
        x = aGpu + i * hGpu;
        if (i == 0 || i == nGpu - 1)
        {
            sharedData[threadId] = gpuF(x);
        }
        else if (i % 2 == 1)
        {
            sharedData[threadId] = 4 * gpuF(x);
        }
        else
        {
            sharedData[threadId] = 2 * gpuF(x);
        }
        break;
    default:
        break;
    }

    __syncthreads();
    // do reduction in shared mem
    for (unsigned int s = NUM_OF_GPU_THREADS / 2; s > 0; s >>= 1) {
        if (threadId < s) {
            sharedData[threadId] = sharedData[threadId] +
                sharedData[threadId + s];
        }
        __syncthreads();
    }

    if (threadId == 0)
    {
        sum[retIdx] = sharedData[0];
    }
}

double reduceCPU(double *sum, int functionRuleTypeCPU)
{
    int idx;
    double result = 0.0;
    double x;
    double h = (b - a) / n;

    for (idx = 0; idx < n / NUM_OF_GPU_THREADS; idx++)
    {
        if (sum[idx] < 0)
        {
            printf("Suma je : %lf i indkes je %d\n", sum[idx], idx);
        }
        result += sum[idx];
    }

    for (idx = (n / NUM_OF_GPU_THREADS) * NUM_OF_GPU_THREADS; idx < n; idx++)
    {
        switch (functionRuleTypeCPU)
        {
        case RULE_TYPE_QUADRATIC:
            x = ((double)(n - idx - 1) * a + (double)(idx)* b) /
                (double)(n - 1);
            result += f(x);
            break;
        case RULE_TYPE_TRAPHEZOID:
            x = a + idx * h;
            if (idx > 0 && idx < n - 1)
            {
                result = result + f(x);
            }
            else
            {
                result = result + 0.5 * f(x);
            }
            break;
        case RULE_TYPE_SIMPSON:
            x = a + idx * h;
            if (idx == 0 || idx == n - 1)
            {
                result = result + f(x);
            }
            else if (idx % 2 == 1)
            {
                result = result + 4 * f(x);
            }
            else
            {
                result = result + 2 * f(x);
            }

            break;
        default:
            break;
        }

    }

    switch (functionRuleTypeCPU)
    {
    case RULE_TYPE_QUADRATIC:
        result = (b - a) * result / (double)n;
        break;
    case RULE_TYPE_TRAPHEZOID:
        result = h * result;
        break;
    case RULE_TYPE_SIMPSON:
        result = h / 3 * result;
        break;
    default:
        break;
    }

    return  result;
}

void ReduceByRuleOnGpu(double& total_qPar, double* sumGPU, double* sumCPU,
    size_t allocSize, int functionRuleTypeCPU)
{
    int disp;
    int number;
    cudaError_t cudaStatus;

    number = n / NUM_OF_GPU_THREADS;

    cudaStatus = cudaMemcpyToSymbol(functionRuleTypeGpu, &functionRuleTypeCPU, sizeof(int));



    printf("Number is : %d\n", number);

    functionDimTypeCPU = FUNCTION_DIM_TYPE_NORMAL;
    cudaStatus = cudaMemcpyToSymbol(functionDimTypeGpu, &functionDimTypeCPU, sizeof(int));
    addKernel <<< number, NUM_OF_GPU_THREADS >>>(sumGPU);

#if 0
    if (number <= MAX_BLOCKS)
    {
        functionDimTypeCPU = FUNCTION_DIM_TYPE_NORMAL;
        cudaStatus = cudaMemcpyToSymbol(functionDimTypeGpu, &functionDimTypeCPU, sizeof(int));
        addKernel <<< number, NUM_OF_GPU_THREADS >> >(sumGPU);
    }
    else
    {
        disp = number - (number / NUM_OF_GPU_THREADS) * NUM_OF_GPU_THREADS;
        dim3 dim(number / NUM_OF_GPU_THREADS, NUM_OF_GPU_THREADS);


        functionDimTypeCPU = FUNCTION_DIM_TYPE_MATRIX;
        cudaStatus = cudaMemcpyToSymbol(functionDimTypeGpu, &functionDimTypeCPU, sizeof(int));

        addKernel <<< dim, NUM_OF_GPU_THREADS >>>(sumGPU);
        functionDimTypeCPU = FUNCTION_DIM_TYPE_DISP;
        cudaStatus = cudaMemcpyToSymbol(functionDimTypeGpu, &functionDimTypeCPU, sizeof(int));

        addKernel <<< disp, NUM_OF_GPU_THREADS >>>(sumGPU);

    }
#endif
    cudaStatus = cudaMemcpy(sumCPU, sumGPU, allocSize, cudaMemcpyDeviceToHost);

    total_qPar = reduceCPU(sumCPU, functionRuleTypeCPU);

}

int main(int argc, char *argv[])
{


    cudaError_t cudaStatus;
    //double error;
    int i;
    double total_qSeq = 0, total_tSeq = 0, total_sSeq = 0;
    double total_qPar = 0, total_tPar = 0, total_sPar = 0;
    double wtime_qSeq = 0, wtime_tSeq = 0, wtime_sSeq = 0;
    double wtime_qPar = 0, wtime_tPar = 0, wtime_sPar = 0;

    //double sum[NUM_OF_GPU_THREADS];

    double x;
    double h;

    int disp;
    int number;

    double *sumGPU, *sumCPU;

    if (argc != 4) {
        n = 10000000;
        a = 0.0;
        b = 10.0;
    }
    else {
        n = atoi(argv[1]);
        a = atoi(argv[2]);
        b = atoi(argv[3]);
    }



    printf("\n");
    printf("QUAD:\n");
    printf("  Estimate the integral of f(x) from A to B.\n");
    printf("  f(x) = 50 / ( pi * ( 2500 * x * x + 1 ) ).\n");
    printf("\n");
    printf("  A        = %f\n", a);
    printf("  B        = %f\n", b);
    printf("  N        = %d\n", n);



    // Quadratic rule
    wtime_qSeq = omp_get_wtime();

    total_qSeq = 0.0;

    for (i = 0; i < n; i++)
    {
        x = ((double)(n - i - 1) * a + (double)(i)* b) / (double)(n - 1);
        total_qSeq = total_qSeq + f(x);
    }

    wtime_qSeq = omp_get_wtime() - wtime_qSeq;

    total_qSeq = (b - a) * total_qSeq / (double)n;



    // Trapezoidal rule
    h = (b - a) / n;

    wtime_tSeq = omp_get_wtime();

    total_tSeq = 0.0;

    for (i = 0; i < n; i++)
    {
        x = a + i * h;
        if (i > 0 && i < n - 1)
        {
            total_tSeq = total_tSeq + f(x);
        }

        else
        {
            total_tSeq = total_tSeq + 0.5 * f(x);
        }

    }

    total_tSeq = h * total_tSeq;

    wtime_tSeq = omp_get_wtime() - wtime_tSeq;


    // Simpson 1/3 rule

    h = (b - a) / n;

    wtime_sSeq = omp_get_wtime();

    total_sSeq = 0.0;

    for (i = 0; i < n; i++)
    {
        x = a + i * h;
        if (i == 0 || i == n - 1)
            total_sSeq = total_sSeq + f(x);
        else if (i % 2 == 1)
            total_sSeq = total_sSeq + 4 * f(x);
        else
            total_sSeq = total_sSeq + 2 * f(x);
    }

    total_sSeq = h / 3 * total_sSeq;

    wtime_sSeq = omp_get_wtime() - wtime_sSeq;

    printf("Sequential \n");
    printf("  Estimate quadratic rule = %24.16f\n", total_qSeq);
    printf("  Estimate trapezoidal rule = %24.16f\n", total_tSeq);
    printf("  Estimate Simpson 1/3 rule = %24.16f\n", total_sSeq);
    printf("  Time quadratic rule = %f\n", wtime_qSeq);
    printf("  Time trapezoidal rule = %f\n", wtime_tSeq);
    printf("  Time Simpson 1/3 rule = %f\n", wtime_sSeq);
    printf("\n");
    printf("  Normal end of execution.\n");
    printf("\n");

    // Quadratic rule parallel.
    //
    wtime_qPar = omp_get_wtime();
    h = (b - a) / n;
    cudaStatus = cudaMemcpyToSymbol(aGpu, &a, sizeof(double));
    cudaStatus = cudaMemcpyToSymbol(bGpu, &b, sizeof(double));
    cudaStatus = cudaMemcpyToSymbol(nGpu, &n, sizeof(int));
    cudaStatus = cudaMemcpyToSymbol(hGpu, &h, sizeof(double));
    size_t allocSize = n / NUM_OF_GPU_THREADS * sizeof(double);

    cudaStatus = cudaMalloc((void**)&sumGPU, allocSize);
    sumCPU = (double*)malloc(allocSize);

    ReduceByRuleOnGpu(total_qPar, sumGPU, sumCPU, allocSize, RULE_TYPE_QUADRATIC);
    wtime_qPar = omp_get_wtime() - wtime_qPar;

    // Trapezoidal rule
    wtime_tPar = omp_get_wtime();
    ReduceByRuleOnGpu(total_tPar, sumGPU, sumCPU, allocSize, RULE_TYPE_TRAPHEZOID);
    wtime_tPar = omp_get_wtime() - wtime_tPar;

    // Simpson 1/3 rule
    wtime_sPar = omp_get_wtime();
    ReduceByRuleOnGpu(total_sPar, sumGPU, sumCPU, allocSize, RULE_TYPE_SIMPSON);
    wtime_sPar = omp_get_wtime() - wtime_sPar;

    printf("Parallel \n");
    printf("  Estimate quadratic rule = %24.16f\n", total_qPar);
    printf("  Estimate trapezoidal rule = %24.16f\n", total_tPar);
    printf("  Estimate Simpson 1/3 rule = %24.16f\n", total_sPar);
    printf("  Time quadratic rule = %f\n", wtime_qPar);
    printf("  Time trapezoidal rule = %f\n", wtime_tPar);
    printf("  Time Simpson 1/3 rule = %f\n", wtime_sPar);
    printf("\n");
    printf("  Normal end of execution.\n");
    printf("\n");

    if ((fabs(total_tPar - total_tSeq) < ACCURACY) &&
        (fabs(total_qPar - total_qSeq) < ACCURACY) &&
        (fabs(total_sPar - total_sSeq) < ACCURACY))
    {
        printf("Test passed\n");
    }
    else
    {
        printf("Test failed\n");
    }

    return 0;
}

