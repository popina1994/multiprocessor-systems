#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "dump.h"
#include "utils.h"
#include "omp.h"

#define UINT8_MAX 255
#define MAX_THREADS 8

int main(int argc, char* argv[]) {
  struct pb_TimerSet timers;
  struct pb_Parameters *parameters;

  parameters = pb_ReadParameters(&argc, argv);
  if (!parameters)
    return -1;

  if(!parameters->inpFiles[0]){
    fputs("Input file expected\n", stderr);
    return -1;
  }

  int numIterations;
  if (argc >= 2){
	  // Nista pametno, u sustini samo prvi broj iteracija sto se prosledi uzima.
	  //
	  numIterations = atoi(argv[1]);
  } else {
    fputs("Expected at least one command line argument\n", stderr);
    return -1;
  }

  // Ni ovde nista pametno.
  //
  pb_InitializeTimerSet(&timers);

  char *inputStr = "Input";
  char *outputStr = "Output";

  char *seqStr = "Sequential";
  char *parStr = "Parallel";
  // Dodaju se tajmeri ulaz/izlaz u listu tajmera od globalnog tajmera.
  //
  pb_AddSubTimer(&timers, inputStr, pb_TimerID_IO);
  pb_AddSubTimer(&timers, outputStr, pb_TimerID_IO);
  pb_AddSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);
  pb_AddSubTimer(&timers, parStr, pb_TimerID_COMPUTE);

  // Prebaci na input tajmer.
  //
  pb_SwitchToSubTimer(&timers, inputStr, pb_TimerID_IO);

  unsigned int img_width, img_height;
  unsigned int histo_width, histo_height;

  FILE* f = fopen(parameters->inpFiles[0],"rb");
  int result = 0;

  result += fread(&img_width,    sizeof(unsigned int), 1, f);
  result += fread(&img_height,   sizeof(unsigned int), 1, f);
  result += fread(&histo_width,  sizeof(unsigned int), 1, f);
  result += fread(&histo_height, sizeof(unsigned int), 1, f);

  if (result != 4){
    fputs("Error reading input and output dimensions from file\n", stderr);
    return -1;
  }

  unsigned int* img = (unsigned int*) malloc (img_width*img_height*sizeof(unsigned int));
  unsigned char* histoPar = (unsigned char*) calloc (histo_width*histo_height, sizeof(unsigned char));
  unsigned char* histoSeq = (unsigned char*) calloc (histo_width*histo_height, sizeof(unsigned char));
  pb_SwitchToSubTimer(&timers, "Input", pb_TimerID_IO);

  result = fread(img, sizeof(unsigned int), img_width*img_height, f);

  fclose(f);

  if (result != img_width*img_height){
    fputs("Error reading input array from file\n", stderr);
    return -1;
  }
  int iter;

  pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);

  for (iter = 0; iter < numIterations; iter++){
    memset(histoSeq,0,histo_height*histo_width*sizeof(unsigned char));
    unsigned int i;
    for (i = 0; i < img_width*img_height; ++i) {
      const unsigned int value = img[i];
      if (histoSeq[value] < UINT8_MAX) {
        ++histoSeq[value];
      }
    }
  }

  unsigned int idx;
  unsigned int i;

  pb_SwitchToSubTimer(&timers, parStr,  pb_TimerID_COMPUTE);
  unsigned int maxVal[MAX_THREADS] = {0}, glMax = 0;
  unsigned int minVal[MAX_THREADS], glMin = UINT_MAX;
  for (idx = 0; idx < MAX_THREADS; idx ++)
  {
    minVal[idx] = UINT_MAX;
  }

 volatile int z;
  // Divide.
  //
  #pragma omp parallel for num_threads(MAX_THREADS) private(idx)
  for (idx = 0; idx < img_height * img_height; idx ++)
  {

    unsigned int threadId = omp_get_thread_num();
    const unsigned int value = img[idx];

    printf("Thread id : %d %d \n", threadId, idx);
    if (maxVal[threadId] < value)
    {
      printf("Vrednost je %d\n", maxVal[threadId]);
      //printf("Thread id %d", threadId);
      maxVal[threadId] = value;
    }
    /*
    if (minVal[threadId] > value)
    {

      minVal[threadId] = value;

    }*/
  }
  printf("Proslo\n");
  return 0;

  // Conquer.
  //
  for (idx = 0; idx < MAX_THREADS; idx ++)
  {
    if (glMax < maxVal[idx])
    {
      glMax = maxVal[idx];
    }

    if (glMin > minVal[idx])
    {
      glMin = minVal[idx];
    }
  }
  printf("Proslo MAX/MIN");
  return 0;

  unsigned char *histoThread;
  unsigned sizeHisto = glMin - glMin + 1;
  histoThread = (unsigned char*) malloc(sizeof(unsigned char) * sizeHisto * MAX_THREADS);

  printf("Min : %d Max : %d \n", glMin, glMax);
  printf("Velicina hisograma je %d\n ", sizeHisto);
  //for (iter = 0; iter < numIterations; iter++)
  //{
    memset(histoPar,0,histo_height * histo_width * sizeof(unsigned char));
    memset(histoThread, 0, sizeHisto * MAX_THREADS * sizeof(unsigned int));

    #pragma omp parallel num_threads(MAX_THREADS)
    {
      unsigned int threadId  = omp_get_thread_num();
      unsigned int i;

      #pragma omp for private(i)
      for (i = 0; i < img_width * img_height;  ++i)
      {
        const unsigned int value = img[i];
        printf("Indeks je : %d\n", threadId * sizeHisto + value - glMin);
        continue;
        if (histoThread[threadId * sizeHisto + value - glMin] < UINT8_MAX)
        {
          ++histoThread[threadId * sizeHisto + value - glMin];
        }
      }

      printf("Prosao sam glupo histovanje");
      #if 0
      #pragma omp for private(i)
      for (i = 0; i < sizeHisto; i ++)
      {
        unsigned int total = 0;
        unsigned int idx;
        for (idx = 0; idx < MAX_THREADS; idx ++)
        {
           total = total + histoThread[idx * sizeHisto + i];
        }
        if (total > UINT8_MAX)
        {
          histoPar[i] = UINT8_MAX;
        }
        else
        {
          histoPar[i] = (unsigned char)total;
        }

      }
      #endif

    }
  //}
  printf("Proslo sve kriticno");
  return 0;

  // Dealokacija memorije.
  //
  free(histoThread);

  pb_SwitchToSubTimer(&timers, outputStr, pb_TimerID_IO);

  if (parameters->outFile) {
    dump_histo_img(histoPar, histo_height, histo_width, parameters->outFile);
  }

  pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);

  free(img);
  free(histoPar);

  pb_SwitchToTimer(&timers, pb_TimerID_NONE);

  printf("\n");
  pb_PrintTimerSet(&timers);
  pb_FreeParameters(parameters);
  printf("Uspesno\n");
  return 0;
}
