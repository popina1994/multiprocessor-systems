#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <unistd.h>
#include <sys/time.h>
#include <math.h>
#include <mpi.h>
#include <string.h>

extern char *optarg;

#ifndef __ARGS_H__
#define __ARGS_H__

typedef struct _options_
{
	char *data_name;
	char *random_name;
	int random_count;
	int npoints;
	char *output_name;
} options;

void usage(char *name);
void parse_args(int argc, char **argv, options* args);

#endif
#ifndef __MODEL_H__
#define __MODEL_H__

#include "utils.h"

#define D2R M_PI/180.0
#define R2D 180.0/M_PI
#define R2AM 60.0*180.0/M_PI

#define bins_per_dec 5
#define min_arcmin 1.0
#define max_arcmin 10000.0

#define NUM_BINS 20

typedef unsigned long hist_t;

struct spherical
{
	float ra, dec;  // latitude, longitude pair
};

struct cartesian
{
	float x, y, z;  // cartesian coodrinates
};

int readdatafile(char *fname, struct cartesian *data, int npoints);

int doCompute(struct cartesian *data1, int n1, struct cartesian *data2,
	int n2, int doSelf, long long *data_bins,
	int nbins, float *binb);

void initBinB(struct pb_TimerSet *timers);

#endif




#define TAG_SIGNAL 0x001
#define TAG_RANDOM 0x002
#define TAG_DATA   0x003
#define TAG_NPR    0x004
#define TAG_NPD    0x005
#define TAG_JOB_FINISHED 0x006
#define TAG_RANDOM_NULL 0x007
#define TAG_DATA_NULL 0x008
#define TAG_DRS 0x009
#define TAG_RRS 0x00A
#define TAG_RF 0x00B


void CompareAndSet(long long *first, long long *second, size_t memsize, int *isEqual)
{
	int idx;
	int idxInner;



	for (idx = 0; idx < memsize / sizeof(long long); idx++)
	{
		if (first[idx] != second[idx])
		{

			printf("Razlikuju se na \n %d %llu %llu\n", idx, first[idx], second[idx]);
			*isEqual = 0;
			return;
		}
	}
}


void usage(char *name)
{
	printf("Usage: %s <-d data_file_name> <-r rnd_file_name> "
		"<-m rnd_count> <-p count> <-o file_name>\n", name);
	exit(0);
}

int doCompute(struct cartesian *data1, int n1, struct cartesian *data2,
	int n2, int doSelf, long long *data_bins,
	int nbins, float *binb)
{


	int idx;
#if 0
	for (idx = 0; idx < nbins + 1; idx++)
	{
		//data_bins[idx] = 0;
	}

	printf("N1 : %d\n", n1);

	for (idx = 0; idx < n1; idx++)
	{
		printf("data 1 x : %f y : %f z : %f\n", data1[idx].x, data1[idx].y, data1[idx].z);
	}

	if (doSelf == 0) {
		printf("N2 : %d\n", n1);

		for (idx = 0; idx < n1; idx++)
		{
			printf("data 1 x : %f y : %f z : %f\n", data1[idx].x, data1[idx].y, data1[idx].z);
		}

	}

	printf("nbins : %d\n", nbins);

	for (idx = 0; idx < nbins + 1; idx++)
	{
		printf("nbins %f\n", binb[idx]);
	}

#endif
	int i, j, k;
	if (doSelf)
	{
		n2 = n1;
		data2 = data1;
	}

	for (i = 0; i < ((doSelf) ? n1 - 1 : n1); i++)
	{
		const register float xi = data1[i].x;
		const register float yi = data1[i].y;
		const register float zi = data1[i].z;

		for (j = ((doSelf) ? i + 1 : 0); j < n2; j++)
		{
			register float dot = xi * data2[j].x + yi * data2[j].y +
				zi * data2[j].z;

			// run binary search
			register int min = 0;
			register int max = nbins;
			register int k, indx;

			while (max > min + 1)
			{
				k = (min + max) / 2;
				if (dot >= binb[k])
					max = k;
				else
					min = k;
			};

			if (dot >= binb[min])
			{
				data_bins[min] += 1; /*k = min;*/
			}
			else if (dot < binb[max])
			{
				data_bins[max + 1] += 1; /*k = max+1;*/
			}
			else
			{
				data_bins[max] += 1; /*k = max;*/
			}
		}
	}
#if 0

	for (idx = 0; idx < nbins + 1; idx++)
	{
		printf("data_bins %llu\n", data_bins[idx]);
	}
#endif
	return 0;
}




void parse_args(int argc, char **argv, options* args)
{
	int c;

	args->data_name = NULL;
	args->random_name = NULL;
	args->random_count = 0;
	args->npoints = 0;
	args->output_name = NULL;

	while ((c = getopt(argc, argv, "d:n:r:p:o:")) != EOF)
	{
		switch (c)
		{
		case 'd':
			args->data_name = optarg;
			break;
		case 'r':
			args->random_name = optarg;
			break;
		case 'n':
			args->random_count = atoi(optarg);
			break;
		case 'o':
			args->output_name = optarg;
			break;
		case 'p':
			args->npoints = atol(optarg);
			break;
		default:
			usage(argv[0]);
		}
	}
}

int readdatafile(char *fname, struct cartesian *data, int npoints)
{
	FILE *infile;
	int lcount = 0;
	float ra, dec;

	if ((infile = fopen(fname, "r")) == NULL)
	{
		fprintf(stderr, "Unable to open data file %s for reading\n", fname);
		return lcount;
	}

	for (lcount = 0; lcount < npoints; lcount++)
	{
		if (fscanf(infile, "%f %f", &ra, &dec) != 2)
			break;

		{
			// data conversion
			float rarad = D2R * ra;
			float decrad = D2R * dec;
			float cd = cos(decrad);

			data[lcount].x = cos(rarad) * cd;
			data[lcount].y = sin(rarad) * cd;
			data[lcount].z = sin(decrad);
		}
	}

	fclose(infile);

	return lcount;
}


#if _POSIX_VERSION >= 200112L
# include <sys/time.h>
#endif

/* Free an array of owned strings. */
static void
free_string_array(char **string_array)
{
	char **p;

	if (!string_array) return;
	for (p = string_array; *p; p++) free(*p);
	free(string_array);
}

/* Parse a comma-delimited list of strings into an
* array of strings. */
static char **
read_string_array(char *in)
{
	char **ret;
	int i;
	int count;			/* Number of items in the input */
	char *substring;		/* Current substring within 'in' */

							/* Count the number of items in the string */
	count = 1;
	for (i = 0; in[i]; i++) if (in[i] == ',') count++;

	/* Allocate storage */
	ret = (char **)malloc((count + 1) * sizeof(char *));

	/* Create copies of the strings from the list */
	substring = in;
	for (i = 0; i < count; i++) {
		char *substring_end;
		int substring_length;

		/* Find length of substring */
		for (substring_end = substring;
			(*substring_end != ',') && (*substring_end != 0);
			substring_end++);

		substring_length = substring_end - substring;

		/* Allocate memory and copy the substring */
		ret[i] = (char *)malloc(substring_length + 1);
		memcpy(ret[i], substring, substring_length);
		ret[i][substring_length] = 0;

		/* go to next substring */
		substring = substring_end + 1;
	}
	ret[i] = NULL;		/* Write the sentinel value */

	return ret;
}

struct argparse {
	int argc;			/* Number of arguments.  Mutable. */
	char **argv;			/* Argument values.  Immutable. */

	int argn;			/* Current argument number. */
	char **argv_get;		/* Argument value being read. */
	char **argv_put;		/* Argument value being written.
							* argv_put <= argv_get. */
};

static void
initialize_argparse(struct argparse *ap, int argc, char **argv)
{
	ap->argc = argc;
	ap->argn = 0;
	ap->argv_get = ap->argv_put = ap->argv = argv;
}

static void
finalize_argparse(struct argparse *ap)
{
	/* Move the remaining arguments */
	for (; ap->argn < ap->argc; ap->argn++)
		*ap->argv_put++ = *ap->argv_get++;
}

/* Delete the current argument. */
static void
delete_argument(struct argparse *ap)
{
	if (ap->argn >= ap->argc) {
		fprintf(stderr, "delete_argument\n");
	}
	ap->argc--;
	ap->argv_get++;
}

/* Go to the next argument.  Also, move the current argument to its
* final location in argv. */
static void
next_argument(struct argparse *ap)
{
	if (ap->argn >= ap->argc) {
		fprintf(stderr, "next_argument\n");
	}
	/* Move argument to its new location. */
	*ap->argv_put++ = *ap->argv_get++;
	ap->argn++;
}

static int
is_end_of_arguments(struct argparse *ap)
{
	return ap->argn == ap->argc;
}

static char *
get_argument(struct argparse *ap)
{
	return *ap->argv_get;
}

static char *
consume_argument(struct argparse *ap)
{
	char *ret = get_argument(ap);
	delete_argument(ap);
	return ret;
}

struct pb_Parameters *
	pb_ReadParameters(int *_argc, char **argv)
{
	char *err_message;
	struct argparse ap;
	struct pb_Parameters *ret =
		(struct pb_Parameters *)malloc(sizeof(struct pb_Parameters));

	/* Initialize the parameters structure */
	ret->outFile = NULL;
	ret->inpFiles = (char **)malloc(sizeof(char *));
	ret->inpFiles[0] = NULL;

	/* Each argument */
	initialize_argparse(&ap, *_argc, argv);
	while (!is_end_of_arguments(&ap)) {
		char *arg = get_argument(&ap);

		/* Single-character flag */
		if ((arg[0] == '-') && (arg[1] != 0) && (arg[2] == 0)) {
			delete_argument(&ap);	/* This argument is consumed here */

			switch (arg[1]) {
			case 'o':			/* Output file name */
				if (is_end_of_arguments(&ap))
				{
					err_message = "Expecting file name after '-o'\n";
					goto error;
				}
				free(ret->outFile);
				ret->outFile = strdup(consume_argument(&ap));
				break;
			case 'i':			/* Input file name */
				if (is_end_of_arguments(&ap))
				{
					err_message = "Expecting file name after '-i'\n";
					goto error;
				}
				ret->inpFiles = read_string_array(consume_argument(&ap));
				break;
			case '-':			/* End of options */
				goto end_of_options;
			default:
				err_message = "Unexpected command-line parameter\n";
				goto error;
			}
		}
		else {
			/* Other parameters are ignored */
			next_argument(&ap);
		}
	} /* end for each argument */

end_of_options:
	*_argc = ap.argc;		/* Save the modified argc value */
	finalize_argparse(&ap);

	return ret;

error:
	fputs(err_message, stderr);
	pb_FreeParameters(ret);
	return NULL;
}

void
pb_FreeParameters(struct pb_Parameters *p)
{
	char **cpp;

	free(p->outFile);
	free_string_array(p->inpFiles);
	free(p);
}

int
pb_Parameters_CountInputs(struct pb_Parameters *p)
{
	int n;

	for (n = 0; p->inpFiles[n]; n++);
	return n;
}

/*****************************************************************************/
/* Timer routines */

static void
accumulate_time(pb_Timestamp *accum,
	pb_Timestamp start,
	pb_Timestamp end)
{
#if _POSIX_VERSION >= 200112L
	* accum += end - start;
#else
# error "Timestamps not implemented for this system"
#endif
}

#if _POSIX_VERSION >= 200112L
static pb_Timestamp get_time()
{
	struct timeval tv;
	gettimeofday(&tv, NULL);
	return (pb_Timestamp)(tv.tv_sec * 1000000LL + tv.tv_usec);
}
#else
# error "no supported time libraries are available on this platform"
#endif

void
pb_ResetTimer(struct pb_Timer *timer)
{
	timer->state = pb_Timer_STOPPED;

#if _POSIX_VERSION >= 200112L
	timer->elapsed = 0;
#else
# error "pb_ResetTimer: not implemented for this system"
#endif
}

void
pb_StartTimer(struct pb_Timer *timer)
{
	if (timer->state != pb_Timer_STOPPED) {
		fputs("Ignoring attempt to start a running timer\n", stderr);
		return;
	}

	timer->state = pb_Timer_RUNNING;

#if _POSIX_VERSION >= 200112L
	{
		struct timeval tv;
		gettimeofday(&tv, NULL);
		timer->init = tv.tv_sec * 1000000LL + tv.tv_usec;
	}
#else
# error "pb_StartTimer: not implemented for this system"
#endif
}

void
pb_StartTimerAndSubTimer(struct pb_Timer *timer, struct pb_Timer *subtimer)
{
	unsigned int numNotStopped = 0x3; // 11
	if (timer->state != pb_Timer_STOPPED) {
		fputs("Warning: Timer was not stopped\n", stderr);
		numNotStopped &= 0x1; // Zero out 2^1
	}
	if (subtimer->state != pb_Timer_STOPPED) {
		fputs("Warning: Subtimer was not stopped\n", stderr);
		numNotStopped &= 0x2; // Zero out 2^0
	}
	if (numNotStopped == 0x0) {
		fputs("Ignoring attempt to start running timer and subtimer\n", stderr);
		return;
	}

	timer->state = pb_Timer_RUNNING;
	subtimer->state = pb_Timer_RUNNING;

#if _POSIX_VERSION >= 200112L
	{
		struct timeval tv;
		gettimeofday(&tv, NULL);

		if (numNotStopped & 0x2) {
			timer->init = tv.tv_sec * 1000000LL + tv.tv_usec;
		}

		if (numNotStopped & 0x1) {
			subtimer->init = tv.tv_sec * 1000000LL + tv.tv_usec;
		}
	}
#else
# error "pb_StartTimer: not implemented for this system"
#endif

}

void
pb_StopTimer(struct pb_Timer *timer)
{

	pb_Timestamp fini;

	if (timer->state != pb_Timer_RUNNING) {
		fputs("Ignoring attempt to stop a stopped timer\n", stderr);
		return;
	}

	timer->state = pb_Timer_STOPPED;

#if _POSIX_VERSION >= 200112L
	{
		struct timeval tv;
		gettimeofday(&tv, NULL);
		fini = tv.tv_sec * 1000000LL + tv.tv_usec;
	}
#else
# error "pb_StopTimer: not implemented for this system"
#endif

	accumulate_time(&timer->elapsed, timer->init, fini);
	timer->init = fini;

}

void pb_StopTimerAndSubTimer(struct pb_Timer *timer, struct pb_Timer *subtimer) {

	pb_Timestamp fini;

	unsigned int numNotRunning = 0x3; // 0b11
	if (timer->state != pb_Timer_RUNNING) {
		fputs("Warning: Timer was not running\n", stderr);
		numNotRunning &= 0x1; // Zero out 2^1
	}
	if (subtimer->state != pb_Timer_RUNNING) {
		fputs("Warning: Subtimer was not running\n", stderr);
		numNotRunning &= 0x2; // Zero out 2^0
	}
	if (numNotRunning == 0x0) {
		fputs("Ignoring attempt to stop stopped timer and subtimer\n", stderr);
		return;
	}


	timer->state = pb_Timer_STOPPED;
	subtimer->state = pb_Timer_STOPPED;

#if _POSIX_VERSION >= 200112L
	{
		struct timeval tv;
		gettimeofday(&tv, NULL);
		fini = tv.tv_sec * 1000000LL + tv.tv_usec;
	}
#else
# error "pb_StopTimer: not implemented for this system"
#endif

	if (numNotRunning & 0x2) {
		accumulate_time(&timer->elapsed, timer->init, fini);
		timer->init = fini;
	}

	if (numNotRunning & 0x1) {
		accumulate_time(&subtimer->elapsed, subtimer->init, fini);
		subtimer->init = fini;
	}

}

/* Get the elapsed time in seconds. */
double
pb_GetElapsedTime(struct pb_Timer *timer)
{
	double ret;

	if (timer->state != pb_Timer_STOPPED) {
		fputs("Elapsed time from a running timer is inaccurate\n", stderr);
	}

#if _POSIX_VERSION >= 200112L
	ret = timer->elapsed / 1e6;
#else
# error "pb_GetElapsedTime: not implemented for this system"
#endif
	return ret;
}

void
pb_InitializeTimerSet(struct pb_TimerSet *timers)
{
	int n;

	timers->wall_begin = get_time();

	timers->current = pb_TimerID_NONE;

	timers->async_markers = NULL;


	for (n = 0; n < pb_TimerID_LAST; n++) {
		pb_ResetTimer(&timers->timers[n]);
		timers->sub_timer_list[n] = NULL; // free first?
	}
}

void
pb_AddSubTimer(struct pb_TimerSet *timers, char *label, enum pb_TimerID pb_Category) {

	struct pb_SubTimer *subtimer = (struct pb_SubTimer *) malloc
	(sizeof(struct pb_SubTimer));

	int len = strlen(label);

	subtimer->label = (char *)malloc(sizeof(char)*(len + 1));
	sprintf(subtimer->label, "%s\0", label);

	pb_ResetTimer(&subtimer->timer);
	subtimer->next = NULL;

	struct pb_SubTimerList *subtimerlist = timers->sub_timer_list[pb_Category];
	if (subtimerlist == NULL) {
		subtimerlist = (struct pb_SubTimerList *) malloc
		(sizeof(struct pb_SubTimerList));
		subtimerlist->subtimer_list = subtimer;
		timers->sub_timer_list[pb_Category] = subtimerlist;
	}
	else {
		// Append to list
		struct pb_SubTimer *element = subtimerlist->subtimer_list;
		while (element->next != NULL) {
			element = element->next;
		}
		element->next = subtimer;
	}

}

void
pb_SwitchToSubTimer(struct pb_TimerSet *timers, char *label, enum pb_TimerID category)
{

	// switchToSub( NULL, NONE
	// switchToSub( NULL, some
	// switchToSub( some, some
	// switchToSub( some, NONE -- tries to find "some" in NONE's sublist, which won't be printed

	struct pb_Timer *topLevelToStop = NULL;
	if (timers->current != category && timers->current != pb_TimerID_NONE) {
		// Switching to subtimer in a different category needs to stop the top-level current, different categoried timer.
		// NONE shouldn't have a timer associated with it, so exclude from branch
		topLevelToStop = &timers->timers[timers->current];
	}

	struct pb_SubTimerList *subtimerlist = timers->sub_timer_list[timers->current];
	struct pb_SubTimer *curr = (subtimerlist == NULL) ? NULL : subtimerlist->current;

	if (timers->current != pb_TimerID_NONE) {
		if (curr != NULL && topLevelToStop != NULL) {
			pb_StopTimerAndSubTimer(topLevelToStop, &curr->timer);
		}
		else if (curr != NULL) {
			pb_StopTimer(&curr->timer);
		}
		else {
			pb_StopTimer(topLevelToStop);
		}
	}

	subtimerlist = timers->sub_timer_list[category];
	struct pb_SubTimer *subtimer = NULL;

	if (label != NULL) {
		subtimer = subtimerlist->subtimer_list;
		while (subtimer != NULL) {
			if (strcmp(subtimer->label, label) == 0) {
				break;
			}
			else {
				subtimer = subtimer->next;
			}
		}
	}

	if (category != pb_TimerID_NONE) {

		if (subtimerlist != NULL) {
			subtimerlist->current = subtimer;
		}

		if (category != timers->current && subtimer != NULL) {
			pb_StartTimerAndSubTimer(&timers->timers[category], &subtimer->timer);
		}
		else if (subtimer != NULL) {
			// Same category, different non-NULL subtimer
			pb_StartTimer(&subtimer->timer);
		}
		else {
			// Different category, but no subtimer (not found or specified as NULL) -- unprefered way of setting topLevel timer
			pb_StartTimer(&timers->timers[category]);
		}
	}

	timers->current = category;

}

void
pb_SwitchToTimer(struct pb_TimerSet *timers, enum pb_TimerID timer)
{
	/* Stop the currently running timer */
	if (timers->current != pb_TimerID_NONE) {
		struct pb_SubTimer *currSubTimer = NULL;
		struct pb_SubTimerList *subtimerlist = timers->sub_timer_list[timers->current];

		if (subtimerlist != NULL) {
			currSubTimer = timers->sub_timer_list[timers->current]->current;
		}
		if (currSubTimer != NULL) {
			pb_StopTimerAndSubTimer(&timers->timers[timers->current], &currSubTimer->timer);
		}
		else {
			pb_StopTimer(&timers->timers[timers->current]);
		}

	}

	timers->current = timer;

	if (timer != pb_TimerID_NONE) {
		pb_StartTimer(&timers->timers[timer]);
	}
}

void
pb_PrintTimerSet(struct pb_TimerSet *timers)
{

	pb_Timestamp wall_end = get_time();

	struct pb_Timer *t = timers->timers;
	struct pb_SubTimer* sub = NULL;

	int maxSubLength;

	const char *categories[] = {
		"IO", "Kernel", "Copy", "Driver", "Copy Async", "Compute"
	};

	const int maxCategoryLength = 10;

	int i;
	for (i = 1; i < pb_TimerID_LAST - 1; ++i) { // exclude NONE and OVRELAP from this format
		if (pb_GetElapsedTime(&t[i]) != 0) {

			// Print Category Timer
			printf("%-*s: %f\n", maxCategoryLength, categories[i - 1], pb_GetElapsedTime(&t[i]));

			if (timers->sub_timer_list[i] != NULL) {
				sub = timers->sub_timer_list[i]->subtimer_list;
				maxSubLength = 0;
				while (sub != NULL) {
					// Find longest SubTimer label
					if (strlen(sub->label) > maxSubLength) {
						maxSubLength = strlen(sub->label);
					}
					sub = sub->next;
				}

				// Fit to Categories
				if (maxSubLength <= maxCategoryLength) {
					maxSubLength = maxCategoryLength;
				}

				sub = timers->sub_timer_list[i]->subtimer_list;

				// Print SubTimers
				while (sub != NULL) {
					printf(" -%-*s: %f\n", maxSubLength, sub->label, pb_GetElapsedTime(&sub->timer));
					sub = sub->next;
				}
			}
		}
	}

	if (pb_GetElapsedTime(&t[pb_TimerID_OVERLAP]) != 0)
		printf("CPU/Kernel Overlap: %f\n", pb_GetElapsedTime(&t[pb_TimerID_OVERLAP]));

	float walltime = (wall_end - timers->wall_begin) / 1e6;
	printf("Timer Wall Time: %f\n", walltime);

}

void pb_DestroyTimerSet(struct pb_TimerSet * timers)
{
	/* clean up all of the async event markers */
	struct pb_async_time_marker_list ** event = &(timers->async_markers);
	while (*event != NULL) {
		struct pb_async_time_marker_list ** next = &((*event)->next);
		free(*event);
		(*event) = NULL;
		event = next;
	}

	int i = 0;
	for (i = 0; i < pb_TimerID_LAST; ++i) {
		if (timers->sub_timer_list[i] != NULL) {
			struct pb_SubTimer *subtimer = timers->sub_timer_list[i]->subtimer_list;
			struct pb_SubTimer *prev = NULL;
			while (subtimer != NULL) {
				free(subtimer->label);
				prev = subtimer;
				subtimer = subtimer->next;
				free(prev);
			}
			free(timers->sub_timer_list[i]);
		}
	}
}





const int MASTER_RANK = 0;
#define NUM_PROCESSES 4
#define NUM_MASTER_SEND 5
#define NUM_MASTER_RECIEVE 3

const int TEST_VALUE = 1;

int main(int argc, char **argv)
{
	struct pb_TimerSet timers;
	struct pb_Parameters *params;
	int rf, k, nbins, npd, npr;
	float *binb, w;
	long long *DD, **RRSSeq, **DRSSeq, **RRSPar, **DRSPar, *RRS, *DRS;
	size_t memsize;
	struct cartesian *data, *random;
	FILE *outfile;

	char *seqStr = "Sequential";
	char *parStr = "Parallel";
	char *mixedStr = "Mixed";

	int idx;
	int idxInner;
	int isEqual = 1;
	int dummyNull;
	int dummyTrue = 1;
	int dummyFalse = 0;
	int rank;
	int size;
	int recieved;

	int found;

	int busy[NUM_PROCESSES] = { 0 };
	MPI_Request requestSent[NUM_PROCESSES][NUM_MASTER_SEND];
	MPI_Request requestRecieved[NUM_PROCESSES][NUM_MASTER_RECIEVE];
	MPI_Status status;
	int flagRecieved[NUM_PROCESSES][NUM_MASTER_RECIEVE];
	int signal = 1;

	MPI_Init(&argc, &argv);

	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if (NUM_PROCESSES != size)
	{
		MPI_Abort(MPI_COMM_WORLD, -1);
	}

	pb_InitializeTimerSet(&timers);
	pb_AddSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);
	pb_AddSubTimer(&timers, seqStr, pb_TimerID_IO);
	pb_AddSubTimer(&timers, parStr, pb_TimerID_COMPUTE);
	pb_AddSubTimer(&timers, parStr, pb_TimerID_IO);
	pb_AddSubTimer(&timers, mixedStr, pb_TimerID_COMPUTE);
	pb_AddSubTimer(&timers, mixedStr, pb_TimerID_IO);

	params = pb_ReadParameters(&argc, argv);

	options args;
	parse_args(argc, argv, &args);
	pb_SwitchToSubTimer(&timers, mixedStr, pb_TimerID_COMPUTE);


	if (MASTER_RANK == rank) 
	{
		nbins = (int)floor(bins_per_dec * (log10(max_arcmin) -
			log10(min_arcmin)));
		memsize = (nbins + 2) * sizeof(long long);

		// memory for bin boundaries
		binb = (float *)malloc((nbins + 1) * sizeof(float));
		if (binb == NULL)
		{
			fprintf(stderr, "Unable to allocate memory\n");
			MPI_Abort(MPI_COMM_WORLD, -1);;
		}
		for (k = 0; k < nbins + 1; k++)
		{
			binb[k] = cos(pow(10, log10(min_arcmin) +
				k*1.0 / bins_per_dec) / 60.0*D2R);
		}
	}

	MPI_Bcast(&nbins, 1, MPI_INT, MASTER_RANK, MPI_COMM_WORLD);
	MPI_Bcast(&memsize, 1, MPI_LONG, MASTER_RANK, MPI_COMM_WORLD);
	if (MASTER_RANK != rank) 
	{
		binb = (float *)malloc((nbins + 1) * sizeof(float));
		if (binb == NULL)
		{
			fprintf(stderr, "Unable to allocate memory\n");
			MPI_Abort(MPI_COMM_WORLD, -1);;
		}
	}
	MPI_Bcast(binb, nbins + 1, MPI_FLOAT, MASTER_RANK, MPI_COMM_WORLD);

	// memory for DD
	DD = (long long*)malloc(memsize);
	if (DD == NULL)
	{
		fprintf(stderr, "Unable to allocate memory\n");
		MPI_Abort(MPI_COMM_WORLD, -1);;
	}
	bzero(DD, memsize);

	if (MASTER_RANK == rank)
	{
		// memory for RRSSeq
		pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);
		RRSSeq = (long long**)malloc(args.random_count * sizeof(long long*));
		for (idx = 0; idx < args.random_count; idx++)
		{
			RRSSeq[idx] = (long long*)malloc(memsize);
			if (RRSSeq[idx] == NULL)
			{
				fprintf(stderr, "Unable to allocate memory\n");
				MPI_Abort(MPI_COMM_WORLD, -1);
			}
			bzero(RRSSeq[idx], memsize);
		}

		// memory for RRSPar
		pb_SwitchToSubTimer(&timers, parStr, pb_TimerID_COMPUTE);
		RRSPar = (long long**)malloc(args.random_count * sizeof(long long*));
		for (idx = 0; idx < args.random_count; idx++)
		{
			RRSPar[idx] = (long long*)malloc(memsize);
			if (RRSPar[idx] == NULL)
			{
				fprintf(stderr, "Unable to allocate memory\n");
				MPI_Abort(MPI_COMM_WORLD, -1);
			}
			bzero(RRSPar[idx], memsize);
		}

		// memory for DRSSeq
		pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);
		DRSSeq = (long long**)malloc(args.random_count * sizeof(long long*));
		for (idx = 0; idx < args.random_count; idx++)
		{
			DRSSeq[idx] = (long long*)malloc(memsize);
			if (DRSSeq[idx] == NULL)
			{
				fprintf(stderr, "Unable to allocate memory\n");
				MPI_Abort(MPI_COMM_WORLD, -1);
			}
			bzero(DRSSeq[idx], memsize);
		}

		// memory for DRSSeq
		pb_SwitchToSubTimer(&timers, parStr, pb_TimerID_COMPUTE);
		DRSPar = (long long**)malloc(args.random_count * sizeof(long long*));
		for (idx = 0; idx < args.random_count; idx++)
		{
			DRSPar[idx] = (long long*)malloc(memsize);
			if (DRSPar[idx] == NULL)
			{
				fprintf(stderr, "Unable to allocate memory\n");
				MPI_Abort(MPI_COMM_WORLD, -1);
			}
			bzero(DRSPar[idx], memsize);
		}
	}
	else
	{
		RRS = (long long*)malloc(memsize);
		if (RRS == NULL)
		{
			fprintf(stderr, "Unable to allocate memory\n");
			MPI_Abort(MPI_COMM_WORLD, -1);
		}
		bzero(RRS, memsize);

		DRS = (long long*)malloc(memsize);
		if (DRS == NULL)
		{
			fprintf(stderr, "Unable to allocate memory\n");
			MPI_Abort(MPI_COMM_WORLD, -1);
		}
		bzero(DRS, memsize);
	}
	pb_SwitchToSubTimer(&timers, mixedStr, pb_TimerID_COMPUTE);
	// memory for input data
	data = (struct cartesian*)malloc
	(args.npoints * sizeof(struct cartesian));
	if (data == NULL)
	{
		fprintf(stderr,
			"Unable to allocate memory for % data points (#1)\n",
			args.npoints);
		return(0);
	}

	random = (struct cartesian*)malloc
	(args.npoints * sizeof(struct cartesian));
	if (random == NULL)
	{
		fprintf(stderr,
			"Unable to allocate memory for % data points (#2)\n",
			args.npoints);
		return(0);
	}



	if (MASTER_RANK == rank)
	{
		printf("Min distance: %f arcmin\n", min_arcmin);
		printf("Max distance: %f arcmin\n", max_arcmin);
		printf("Bins per dec: %i\n", bins_per_dec);
		printf("Total bins  : %i\n", nbins);
		// read data file
		pb_SwitchToSubTimer(&timers, mixedStr, pb_TimerID_IO);

		npd = readdatafile(params->inpFiles[0], data, args.npoints);
		pb_SwitchToSubTimer(&timers, mixedStr, pb_TimerID_COMPUTE);
		if (npd != args.npoints)
		{
			fprintf(stderr,
				"Error: read %i data points out of %i\n",
				npd, args.npoints);
			return(0);
		}


		// compute DD
		//printf("DD SEQ\n");
		doCompute(data, npd, NULL, 0, 1, DD, nbins, binb);
		pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);
#if 0
		for (idxInner = 0; idxInner < memsize / sizeof(long long); idxInner++)
		{
			printf("SEQ DD BEFORE IDX : %d value %llu\n", idxInner, DD[idxInner]);
		}


		printf("NPD Je %d\n", npd);

		printf("SEQ Nbins %d\n", nbins);
		for (idx = 0; idx < nbins + 1; idx++)
		{
			printf("SEQ idx : %d binb %f\n", idx, binb[idx]);
		}
#endif

		// *********** SEQUENTIAL PART *******************\\
												// loop through random data files
		for (rf = 0; rf < args.random_count; rf++)
		{
			// read random file
			pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_IO);
			npr = readdatafile(params->inpFiles[rf + 1], random, args.npoints);
			pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);
			if (npr != args.npoints)
			{
				fprintf(stderr,
					"Error: read %i random points out of %i in file %s\n",
					npr, args.npoints, params->inpFiles[rf + 1]);
				return(0);
			}
			// compute RR
//			printf("RR SEQ %d\n", rf);
			doCompute(random, npr, NULL, 0, 1, RRSSeq[rf], nbins, binb);

//			printf("DR SEQ\n");
			// compute DR
			doCompute(data, npd, random, npr, 0, DRSSeq[rf], nbins, binb);

#if 0

			printf("RF SEQ : %d\n", rf);
			for (idx = 0; idx < args.npoints; idx++)
			{
				printf("RANDOM SEQ idx : %d x : %f y : %f z: %f\n", idx, random[idx].x,random[idx].y, random[idx].z);
			}

			for (idx = 0; idx < args.npoints; idx++)
			{
				printf("DATA SEQ idx : %d x : %f y : %f z: %f\n", idx, data[idx].x, data[idx].y, data[idx].z);
			}

			printf("NPR SEQ Je %d\n", npr);

			printf("NPD SEQ Je %d\n", npd);
			
			for (idxInner = 0; idxInner < memsize / sizeof(long long); idxInner++)
			{
				//printf("SEQ DRS BEFORE IDX : %d value %llu\n", idxInner, DRSSeq[rf][idxInner]);
			}

			for (idxInner = 0; idxInner < memsize / sizeof(long long); idxInner++)
			{
				printf("SEQ RRS BEFORE IDX : %d value %llu\n", idxInner, RRSSeq[rf][idxInner]);
			}
#endif
		}



		pb_SwitchToSubTimer(&timers, parStr, pb_TimerID_COMPUTE);
		MPI_Bcast(data, sizeof(struct cartesian) * args.npoints, MPI_BYTE,
			MASTER_RANK, MPI_COMM_WORLD);

		MPI_Bcast(&npd, 1, MPI_INT, MASTER_RANK, MPI_COMM_WORLD);

//		printf("NPD %d\n", npd);

		// *********** PARALLEL PART *******************\\
												// loop through random data files
		for (rf = 0; rf < args.random_count; rf++)
		{
			// read random file
			pb_SwitchToSubTimer(&timers, parStr, pb_TimerID_IO);
			npr = readdatafile(params->inpFiles[rf + 1], random, args.npoints);
			pb_SwitchToSubTimer(&timers, parStr, pb_TimerID_COMPUTE);
			if (npr != args.npoints)
			{
				fprintf(stderr,
					"Error: read %i random points out of %i in file %s\n",
					npr, args.npoints, params->inpFiles[rf + 1]);
				return(0);
			}

			while (1)
			{
				found = 0;
				
				//printf("RF :%d\n", rf);
				for (idx = 1; idx < NUM_PROCESSES; idx++)
				{
					//printf("bud[idx] : %d rf : %d ", busy[idx], rf);
					if (busy[idx] == 0)
					{
						found = 1;

						// signal
						MPI_Send(&signal, 1, MPI_INT, idx, TAG_SIGNAL, MPI_COMM_WORLD);
						// random
						MPI_Send(random, sizeof(struct cartesian) * args.npoints,MPI_BYTE, idx, TAG_RANDOM, MPI_COMM_WORLD);
						 //npr
						MPI_Send(&npr, 1, MPI_INT, idx, TAG_NPR, MPI_COMM_WORLD);
							
						MPI_Send(&rf, 1, MPI_INT, idx, TAG_RF, MPI_COMM_WORLD);

						busy[idx] = 1;

						
						MPI_Irecv(RRSPar[rf], nbins + 2, MPI_LONG_LONG, idx, TAG_RRS,
						MPI_COMM_WORLD, &requestRecieved[idx][1]);
						 MPI_Irecv(DRSPar[rf], nbins + 2, MPI_LONG_LONG, idx, TAG_DRS,
						MPI_COMM_WORLD, &requestRecieved[idx][2]);
						

						MPI_Irecv(&busy[idx], 1, MPI_INT, idx, TAG_JOB_FINISHED,
							MPI_COMM_WORLD, &requestRecieved[idx][0]);

						//MPI_Wait(&requestRecieved[idx][0], &status);
						
						//MPI_Wait(&requestRecieved[idx][1], &status);

						//MPI_Wait(&requestRecieved[idx][2], &status);


						/*
						if (rf == TEST_VALUE)
						{
						for (idxInner = 0; idxInner < memsize / sizeof(long long); idxInner++)
						{
						printf("PAR DRS BEFORE IDX : %d value %llu\n", idxInner, DRSPar[rf][idxInner]);
						}


						}
						*/
					}
					else {
						for (idxInner = 0; idxInner < NUM_MASTER_RECIEVE; idxInner ++) 
						{
							MPI_Test(&requestRecieved[idx][idxInner], &flagRecieved[idx][0], &status);	
						}
						
					}
					if (found)
					{
						break;
					}

					// for processes
				}
				if (found)
				{
					break;
				}

				// while true
			}

			// for rf
		}

		signal = 0;

		for (idx = 1; idx < NUM_PROCESSES; idx++)
		{
			while (busy[idx]) 
			{
				for (idxInner = 0; idxInner < NUM_MASTER_RECIEVE; idxInner ++) 
						{
							MPI_Test(&requestRecieved[idx][idxInner], &flagRecieved[idx][0], &status);	
						}
			}
			MPI_Send(&signal, 1, MPI_INT, idx, TAG_SIGNAL, MPI_COMM_WORLD);
		}
		// two different outputs needed
		// compute and output results
		if ((outfile = fopen(params->outFile, "w")) == NULL)
		{
			fprintf(stderr,
				"Unable to open output file %s for writing, assuming stdout\n",
				params->outFile);
			outfile = stdout;
		}
		pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_IO);
		for (k = 1; k < nbins + 1; k++)
		{
			fprintf(outfile, "%d\n%d\n%d\n", DD[k],
				DRSSeq[args.random_count - 1][k],
				RRSSeq[args.random_count - 1][k]);
		}

		pb_SwitchToSubTimer(&timers, parStr, pb_TimerID_IO);
		for (k = 1; k < nbins + 1; k++)
		{
			fprintf(outfile, "%d\n%d\n%d\n", DD[k],
				DRSPar[args.random_count - 1][k],
				RRSPar[args.random_count - 1][k]);
		}

		pb_SwitchToSubTimer(&timers, mixedStr, pb_TimerID_IO);

		if (outfile != stdout)
			fclose(outfile);

		pb_SwitchToSubTimer(&timers, mixedStr, pb_TimerID_COMPUTE);



			
		for (idx = 0; idx < args.random_count; idx++)
		{
			//printf("IDx : %d\n", idx);
			//printf("DRS : \n");
			CompareAndSet(DRSPar[idx], DRSSeq[idx], memsize, &isEqual);

			/*
			if (idx == TEST_VALUE)
			{
				for (idxInner = 0; idxInner < memsize / sizeof(long long); idxInner++)
				{
					printf("PAR AFTER IDX : %d value %llu\n", idxInner, DRSPar[idx][idxInner]);
				}

				for (idxInner = 0; idxInner < memsize / sizeof(long long); idxInner++)
				{
					printf("SEQ AFTER IDX : %d value %llu\n", idxInner, DRSSeq[idx][idxInner]);
				}
			}
			*/
			//printf("RRS: \n");
			CompareAndSet(RRSPar[idx], RRSSeq[idx], memsize, &isEqual);
		}
	}
	else
	{
		MPI_Bcast(data, sizeof(struct cartesian) * args.npoints, MPI_BYTE, MASTER_RANK, MPI_COMM_WORLD);
		MPI_Bcast(&npd, 1, MPI_INT, MASTER_RANK, MPI_COMM_WORLD);

		// compute DD
		//printf("DD par\n");
		doCompute(data, npd, NULL, 0, 1, DD, nbins, binb);

		while (1) 
		{
			bzero(RRS, memsize);
			bzero(DRS, memsize);
			MPI_Recv(&signal, 1, MPI_INT, MASTER_RANK, TAG_SIGNAL, MPI_COMM_WORLD, &status);
			if (signal)
			{
				MPI_Recv(random, sizeof(struct cartesian) * args.npoints, MPI_BYTE, MASTER_RANK, TAG_RANDOM, MPI_COMM_WORLD, &status);
					
				MPI_Recv(&npr, 1, MPI_INT, MASTER_RANK, TAG_NPR, MPI_COMM_WORLD, &status);

				MPI_Recv(&rf, 1, MPI_INT, MASTER_RANK, TAG_RF, MPI_COMM_WORLD, &status);

				// compute RR
				//printf("RR par %d\n", rf);
				doCompute(random, npr, NULL, 0, 1, RRS, nbins, binb);
				// compute DR
				doCompute(data, npd, random, npr, 0, DRS, nbins, binb);

				
				MPI_Send(RRS, nbins + 2, MPI_LONG_LONG, MASTER_RANK, TAG_RRS, MPI_COMM_WORLD);
				MPI_Send(DRS, nbins + 2, MPI_LONG_LONG, MASTER_RANK, TAG_DRS, MPI_COMM_WORLD);
				#if 0
				/*

				if (rf == TEST_VALUE) {
					*/
					printf("RF SLAVE :%d\n", rf);
					for (idx = 0; idx < args.npoints; idx++)
					{
						printf("RANDOM SLAVE idx : %d x : %f y : %f z: %f\n ", idx, random[idx].x,
						random[idx].y, random[idx].z);
					}

					printf("NPR SLAVE Je %d\n", npr);

					printf("NPD Je %d\n", npd);
					for (idx = 0; idx < memsize / sizeof(long long); idx++)
					{
					printf("Slave idx %d %llu\n", idx, DRS[idx]);
					}
					for (idx = 0; idx < args.npoints; idx++)
					{
						printf("DATA SLAVE idx : %d x : %f y : %f z: %f\n ", idx, data[idx].x,
							data[idx].y, data[idx].z);
					}

					printf("SLAVE Nbins %d\n", nbins);
					for (idx = 0; idx < nbins + 1; idx++)
					{
						printf("SLAVE idx : %d binb %f\n", idx, binb[idx]);
					}

					for (idxInner = 0; idxInner < memsize / sizeof(long long); idxInner++)
					{
						printf("PAR RRS BEFORE IDX : %d value %llu\n", idxInner, RRS[idxInner]);
					}

					for (idxInner = 0; idxInner < memsize / sizeof(long long); idxInner++)
					{
						printf("PAR DD BEFORE IDX : %d value %llu\n", idxInner, DD[idxInner]);
					}
					/*

				}
				*/
				#endif

				MPI_Send(&dummyFalse, 1, MPI_INT, MASTER_RANK, TAG_JOB_FINISHED, MPI_COMM_WORLD);
				//printf("POSLAO\n");
			}
			else
			{
				break;
			}
		}


	}
	// free memory
	free(data);
	free(random);
	free(binb);
	free(DD);

	if (MASTER_RANK == rank)
	{
		pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);
		for (idx = 0; idx < args.random_count; idx++)
		{
			free(RRSSeq[idx]);
		}
		free(RRSSeq);

		pb_SwitchToSubTimer(&timers, parStr, pb_TimerID_COMPUTE);
		for (idx = 0; idx < args.random_count; idx++)
		{
			free(RRSPar[idx]);
		}
		free(RRSPar);

		pb_SwitchToSubTimer(&timers, seqStr, pb_TimerID_COMPUTE);
		for (idx = 0; idx < args.random_count; idx++)
		{
			free(DRSSeq[idx]);
		}
		free(DRSSeq);

		pb_SwitchToSubTimer(&timers, parStr, pb_TimerID_COMPUTE);
		for (idx = 0; idx < args.random_count; idx++)
		{
			free(DRSPar[idx]);
		}
		free(DRSPar);

		pb_SwitchToTimer(&timers, pb_TimerID_NONE);

		if (isEqual)
		{
			printf(" Test PASSED\n");
		}
		else
		{
			printf(" Test FAILED\n");
		}
		pb_PrintTimerSet(&timers);
	}
	else
	{
		free(DRS);
		free(RRS);
	}

	pb_FreeParameters(params);
	MPI_Finalize();
}

